using Dune2000.Enums;
using Dune2000.Extensions.Missions;
using Dune2000.FileFormats.INI;
using Dune2000.Launcher.UI.Forms;
using Primrose.Primitives.Extensions;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Windows.Forms;

namespace Dune2000.Launcher.UI.UserControls
{
  public partial class MissionBriefingScreen : PreviewKeyUserControl, ILinkedControl
  {
    public const int FADE_STEPS = 5;

    private readonly struct BriefingItem
    {
      public readonly string Caption;
      public readonly string Text;
      public readonly Image Image;

      public BriefingItem(string caption, string text, Image image = null)
      {
        Caption = caption;
        Text = text;
        Image = image;
      }
    }

    public UpdateDelegate Clicked_Start;
    public UpdateDelegate Clicked_Back;
    public GetTextDelegate GetText;

    public delegate string GetTextDelegate(string key);
    public int BriefingItemIndex { get { return _briefingItemIndex; } set { if (_briefingItemIndex != value) { AudioEngine.Click(); _briefingItemIndex = value; SetFade(); UpdateItem(); } } }

    private BriefingItem[] _briefingItems;
    private MissionSet _mission;
    private string[] _unitDesc;
    private Size _imgSize;
    private Image _dispImage; // dispose generated copy of image


    private int _briefingItemIndex = 0;
    private int _briefingItemMax = 0;

    public MissionBriefingScreen(MissionSet mission, string[] unitDescriptions = null)
    {
      InitializeComponent();
      Dock = DockStyle.Fill;

      spBriefing.TextCacheUpdated += UpdateControls;
      _mission = mission;
      _unitDesc = unitDescriptions;
      _imgSize = spImage.Size;

      SetKeyAction(Keys.Escape, () =>{ if (spBack.Enabled) { SpBack_Click(null, null); } }, "Return to previous menu");
      SetKeyAction(Keys.Left, () => { if (spPrevItem.Enabled) { SpPrevItem_Click(null, null); } }, "Previous item");
      SetKeyAction(Keys.Right, () => { if (spNextItem.Enabled) { SpNextItem_Click(null, null); } }, "Next item");
      SetKeyAction(Keys.Up, () => { if (spPrevPage.Enabled) { SpPrevPage_Click(null, null); } }, "Previous page");
      SetKeyAction(Keys.Down, () => { if (spNextPage.Enabled) { SpNextPage_Click(null, null); } }, "Next page");
      SetKeyAction(Keys.Enter, () => { if (spStart.Enabled) { SpStart_Click(null, null); } }, "Begin the mission");
      SetKeyAction(Keys.D1, () => { if (spEasy.Enabled) { SpEasy_Click(null, null); } }, "Set Easy Difficulty");
      SetKeyAction(Keys.D2, () => { if (spNormal.Enabled) { SpNormal_Click(null, null); } }, "Set Normal Difficulty");
      SetKeyAction(Keys.D3, () => { if (spHard.Enabled) { SpHard_Click(null, null); } }, "Set Hard Difficulty");
    }

    private void SetMission(MissionSet mission, string[] unitDescriptions = null)
    {
      _mission = mission;
      _unitDesc = unitDescriptions;

      spTitle.Text = _mission.Info.Name;
      _briefingItems = GetBriefings();

      UpdateDifficulty(_mission.Difficulty);
      UpdateItem();
    }

    private void UpdateDifficulty(Difficulty difficulty)
    {
      _mission.Difficulty = difficulty;
      spEasy.BaseImage = difficulty == Difficulty.EASY ? Properties.Resources.EASY_UP : Properties.Resources.EASY_DN;
      spNormal.BaseImage = difficulty == Difficulty.NORMAL ? Properties.Resources.NORMAL_UP : Properties.Resources.NORMAL_DN;
      spHard.BaseImage = difficulty == Difficulty.HARD ? Properties.Resources.HARD_UP : Properties.Resources.HARD_DN;
    }

    private BriefingItem[] GetBriefings()
    {
      string rulesPath = _mission.Source.Rules;
      if (rulesPath != null)
      {
        MapRulesFile rulf = new MapRulesFile();
        rulf.ReadFromFile(rulesPath);

        string prevDir = Directory.GetCurrentDirectory();

        try
        {
          // Set directory to the rules path, relative paths for images will be resolved from the rules folder path.
          Directory.SetCurrentDirectory(Path.GetDirectoryName(rulesPath));

          List<BriefingItem> items = new List<BriefingItem>();
          // briefing is generated by  Basic.Briefing -> Basic.TextUibBriefingKey -> "No briefing available..."
          string caption = rulf.Basic.BriefingCaption;
          string briefing = rulf.Basic.Briefing ?? GetText?.Invoke(rulf.Basic.TextUibBriefingKey) ?? "No briefing available...";
          string briefingImgPath = rulf.Basic.BriefingImage;
          Image bImg = null;
          try
          {
            if (briefingImgPath != null) { bImg = new Bitmap(briefingImgPath); }
          }
          catch { } // silent pass for image load failure
          items.Add(new BriefingItem(caption, briefing, bImg));

          // Add additional briefings
          int index = 0;
          while (index < rulf.AdditionalBriefings.Length)
          {
            caption = rulf.AdditionalBriefings[index].BriefingCaption;
            briefing = rulf.AdditionalBriefings[index].Briefing ?? GetText?.Invoke(rulf.AdditionalBriefings[index].TextUibBriefingKey) ?? "No briefing available...";
            briefingImgPath = rulf.AdditionalBriefings[index].BriefingImage;
            bImg = null;
            try
            {
              if (briefingImgPath != null) { bImg = new Bitmap(briefingImgPath); }
            }
            catch { } // silent pass for image load failure

            items.Add(new BriefingItem(caption, briefing, bImg));
            index++;
          }

          // Add unit description items from campaigns
          if (_unitDesc != null)
            foreach (string uD in _unitDesc)
            {
              string key = "";
              if (uD.Contains(":"))
              {
                int sep = uD.IndexOf(":");
                key = uD.Substring(0, sep);
                caption = uD.Substring(sep + 1);
              }
              else
              {
                key = uD;
                caption = uD;
              }
              string uibkey = "B_" + key;
              briefing = GetText?.Invoke(uibkey) ?? "Missing briefing for {0}...".F(caption);
              briefingImgPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"assets/images", _mission.Info.House.ToString(), "{0}.png".F(key));
              bImg = null;
              try
              {
                if (briefingImgPath != null) { bImg = new Bitmap(briefingImgPath); }
              }
              catch { } // silent pass for image load failure

              items.Add(new BriefingItem(caption, briefing, bImg));
              index++;
            }

          _briefingItemMax = items.Count;
          return items.ToArray();
        }
        catch
        {
          // ???
        }
        finally
        {
          Directory.SetCurrentDirectory(prevDir);
        }
      }
      return null;
    }

    private void LoadImage(Image image)
    {
      if (IsDisposed) { return; }
      if (image == null)
      {
        spImage.BaseImage = null;
        spImage.Visible = true; // remain visible for fading purposes
        spBriefing.TextMargin = default;
      }
      else
      {
        if (image.Width < _imgSize.Width && image.Height < _imgSize.Height)
        {
          // 128x128
          Image tImg = new Bitmap(_imgSize.Width, _imgSize.Height);
          Rectangle r = new Rectangle((tImg.Width - image.Width) / 2, (tImg.Height - image.Height) / 2, image.Width, image.Height);
          if (r.Width > tImg.Width || r.Height > tImg.Height)
          {
            // scale down
            float factor = ((float)tImg.Width / r.Width).Min((float)tImg.Height / r.Height);

            Point p2 = new Point((int)(tImg.Width - image.Width * factor) / 2, (int)(tImg.Height - image.Height * factor) / 2);

            r = new Rectangle(
                 p2,
                 new Size((int)(image.Width * factor), (int)(image.Height * factor)));
          }

          Graphics g = Graphics.FromImage(tImg);

          g.InterpolationMode = InterpolationMode.NearestNeighbor;
          g.PixelOffsetMode = PixelOffsetMode.Half;
          g.DrawImage(image, r);

          spImage.BaseImage = tImg; // Note: This does remove animations
          _dispImage?.Dispose();
          _dispImage = tImg;
        }
        else
        {
          spImage.BaseImage = image;
          _dispImage?.Dispose();
        }

        spImage.Visible = true;
        spBriefing.TextMargin = new Padding(10 + _imgSize.Width, 0, 0, 0);
      }

      UpdateControls();
    }

    private void SetFade()
    {
      if (FADE_STEPS > 0)
      {
        spTitle.SetFade(FADE_STEPS);
        spBriefing.SetFade(FADE_STEPS);
        spImage.SetFade(FADE_STEPS);
      }
    }

    private void UpdateItem()
    {
      BriefingItem[] items = _briefingItems;

      if (items == null || items.Length == 0)
      {
        spBriefing.Text = Resource.Strings.NoBriefing;
        BriefingItemIndex = 0;

        spPrevItem.Enabled = false;
        spNextItem.Enabled = false;
        return;
      }
      else
      {
        int index = BriefingItemIndex.Clamp(0, items.Length - 1);
        string text = items[index].Text?.Replace('_', '\n').Replace('¬', '\n');

        spTitle.Text = items[index].Caption ?? _mission.Info.Name;
        spBriefing.Text = text;
        LoadImage(items[index].Image);

        spPrevItem.Enabled = index > 0;
        spNextItem.Enabled = index < items.Length - 1;

        BriefingItemIndex = index;
      }
      UpdateControls();
    }

    private void UpdateControls()
    {
      spPrevPage.Enabled = !spBriefing.IsFirstTextPage;
      spNextPage.Enabled = !spBriefing.IsLastTextPage;
    }

    private void SpEasy_Click(object sender, EventArgs e) { AudioEngine.Click(); UpdateDifficulty(Difficulty.EASY); }
    private void SpNormal_Click(object sender, EventArgs e) { AudioEngine.Click(); UpdateDifficulty(Difficulty.NORMAL); }
    private void SpHard_Click(object sender, EventArgs e) { AudioEngine.Click(); UpdateDifficulty(Difficulty.HARD); }
    private void SpPrevItem_Click(object sender, EventArgs e) { BriefingItemIndex = (BriefingItemIndex - 1).Clamp(0, _briefingItemMax - 1); }
    private void SpNextItem_Click(object sender, EventArgs e) { BriefingItemIndex = (BriefingItemIndex + 1).Clamp(0, _briefingItemMax - 1); }
    private void SpPrevPage_Click(object sender, EventArgs e) { if (!spBriefing.IsFirstTextPage) { AudioEngine.Click(); spBriefing.SetFade(FADE_STEPS); spBriefing.TextPage--; } }
    private void SpNextPage_Click(object sender, EventArgs e) { if (!spBriefing.IsLastTextPage) { AudioEngine.Click(); spBriefing.SetFade(FADE_STEPS); spBriefing.TextPage++; } }
    private void SpStart_Click(object sender, EventArgs e) { AudioEngine.Click(); Clicked_Start?.Invoke(); }
    private void SpBack_Click(object sender, EventArgs e) { AudioEngine.Click(); Clicked_Back?.Invoke(); }
    private void SpKeyHelp_Click(object sender, EventArgs e) { Clicked_KeyHelp?.Invoke(); }

    public override void Link(Engine e)
    {
      GetText = e.GetUibText;
    }

    public override void Link(GameForm f)
    {
      base.Link(f);
      Clicked_Back = () => f.Remove(this, TransitionStyle.FADE_BLACK);
      Clicked_Start = () => { f.Engine.LaunchGame(_mission); f.Push(new GameRunningScreen(), TransitionStyle.FADE_TWEEN); };
    }

    public override void Activate(Engine e, Control prevControl)
    {
      SetMission(_mission, _unitDesc);
    }

    public void DisposeInner()
    {
      if (_briefingItems != null)
      {
        foreach (BriefingItem b in _briefingItems)
        {
          b.Image?.Dispose();
        }
      }
      _briefingItems = null;
    }
  }
}
